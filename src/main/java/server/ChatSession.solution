 // TODO CHALLENGE-0:
private void handleHelloMessage(JSONObject messageObject) {
    username = messageObject.getString("sender");
    sendToUser(new ChatMessage(Strings.apply("Willkommen im sirius Chat, %s!", username), "SKIP"));
}

//TODO CHALLENGE-0:
private void handleChatMessage(ChatMessage chatMessage) {
    sendToUser(chatMessage);
}

//TODO CHALLENGE-1:

@Part
private static ChatSessionRegistry registry;

private void handleChatMessage(ChatMessage chatMessage) {
    uplink.distributeMessage(chatMessage);
}

@Override
public void onWebsocketOpened() {
    registry.registerNewSession(this);
}

@Override
public void onWebsocketClosed() {
    registry.removeSession(this);
}

//TODO CHALLENGE-5:

@Parts(ChatBot.class)
private static Collection<ChatBot> chatBots;

Optional<ChatBot> bot =
        chatBots.stream().filter(chatBot -> chatBot.shouldHandleMessage(chatMessage)).findFirst();
if (bot.isPresent()) {
    bot.get().handleMessage(chatMessage, this::sendToUser, uplink::distributeMessage);
} else {
    uplink.distributeMessage(chatMessage);
}

//TODO CHALLENGE-6
@Part
private static Isenguard isenguard;

@Override
public void onWebsocketOpened() {
    isenguard.enforceRateLimiting(getContext().getRemoteIP().toString(),
                                  "connection",
                                  RateLimitingInfo::fromCurrentContext);
}

private void handleChatMessage(ChatMessage chatMessage) {
    isenguard.enforceRateLimiting(getContext().getRemoteIP().toString(),
                                  "frame",
                                  RateLimitingInfo::fromCurrentContext);
}
