# This contains the main system configuration for the application.
#
# The final configuration is built by first loading all component
# configs (component-kernel.conf, component-web.conf, component-db.conf, component-biz.conf). Then
# the application.conf is loaded. If the system is started from an IDE (or in debug mode, by using -Ddebug=true),
# the develop.conf from the working directory is loaded. Finally, if present, the instance.conf is loaded.
# Note that each config file can extend and overwrite the configuration from the previous file(s). All this is
# performed by the Sirius and Setup classes in sirius-kernel.

# Contains some infos about the actual product. Note that the patterns below will be replaced by the
# maven build.
product {
  name = "SIRIUS Chat Client"
  version = "${project.version}"
  build = "${build.number}"
  date = "${timestamp}"
  vcs = "${build.vcs.number}"
  tagLine = "This is a sample of how to use SIRIUS to build a basic chat server."
}

# Setup of the NLS class which does the bulk work of i18n.
nls {
    defaultLanguage = de
    languages = [ de, en ]
}

# Specifies which user manager is used. The "public" user manager grants the given roles to everyone
# without authentication. Note that this would be a catastrophic configuration for a real application as
# anyone can control the system settings by accessing the built-in console. However it simplifies our
# setup.
# Note that by default the "tenant" user manager from sirius-biz is used. This provides multi user +
# multi tenant operation out of the box by storing all data in either a JDBC datasource or MongoDB.
security.scopes.default.manager = "public"
security.scopes.default.publicRoles += "permission-system-console"

# Provides the configuration used by CHALLENGE-6
isenguard.limit {

    # Limits frame events to at most 1000 / 1min per user
    # Lower this limit to check if it works
    frame {
        type = "ip"
        interval = 1m
        limit = 1000
    }

    # Limits request events to at most 300 / 1min per user
    request {
        type = "ip"
        interval = 1m
        limit = 300
    }
}
